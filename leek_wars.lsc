///////////////////////////////////////////////////////////////////////////
///////																///////
///////						Globals definition						///////
///////																///////
///////////////////////////////////////////////////////////////////////////

global enemiesInfo = [];				// Tableau d'informations des ennemis
global alliesInfo  = [];				// Tableau d'informations des alliés
global weaponDamage = [];				// Tableau des dommages moyens des armes
global lastEnemiesLife = [];			// Tableau de vie des ennemis durant le dernier tour

// Valeur moyenne pour certains des chips

global CHIP_BANDAGE_VALUE = 13;
global CHIP_CURE_VALUE = 39;


// Dommage moyen des armes jusqu'à 7
weaponDamage[1] = 17;
weaponDamage[2] = 22;
weaponDamage[3] = 21;
weaponDamage[4] = 38;
weaponDamage[5] = 32;
weaponDamage[6] = 51;
weaponDamage[7] = 49;

///////////////////////////////////////////////////////////////////////////
///////																///////
///////						Helpers functions						///////
///////																///////
///////////////////////////////////////////////////////////////////////////

function isStretchingOn(leek) {
	return(getEnemyInfoFor(leek,"BASE_AGILITY")!=getEnemyInfoFor(leek,"AGILITY"));
}

			////////////////////////////////////////////////////////
			///////										     ///////
			///////				Weapons Functions		 	 ///////
			///////											 ///////
			////////////////////////////////////////////////////////

// Fonction qui permet de retourner le dommage moyen d'une arme
function getWeaponDamage(weapon) {
	return(weaponDamage[weapon]);
}

			////////////////////////////////////////////////////////
			///////										     ///////
			///////			Enemies Info Functions			 ///////
			///////											 ///////
			////////////////////////////////////////////////////////

// Fonction qui permet de construire le tableau des informations concernant les ennemis
function getEnemiesAllInfo() {
	for (var enemy in getAliveEnemies()) {
		enemiesInfo[enemy] = [];
		enemiesInfo[enemy]["ID"]=enemy;
		enemiesInfo[enemy]["TOTAL_LIFE"]=getTotalLife(enemy);
		enemiesInfo[enemy]["LIFE"]=getLife(enemy);
		if (getTurn() == 1) enemiesInfo[enemy]["BASE_FORCE"]=getForce(enemy);
		if (getTurn() == 1) enemiesInfo[enemy]["BASE_AGILITY"]=getAgility(enemy);
		enemiesInfo[enemy]["FORCE"]=getForce(enemy);
		enemiesInfo[enemy]["AGILITY"]=getAgility(enemy);
		if (getTurn() == 1) enemiesInfo[enemy]["LAST_LIFE"]=getLife(enemy);
		enemiesInfo[enemy]["RELATIVE_SHIELD"]=getRelativeShield(enemy);
		enemiesInfo[enemy]["ABSOLUTE_SHIELD"]=getAbsoluteShield(enemy);
		enemiesInfo[enemy]["DISTANCE"]=getCellDistance(getCell(),getCell(enemy));
		enemiesInfo[enemy]["LIFE"] == enemiesInfo[enemy]["LAST_LIFE"] ? enemiesInfo[enemy]["HAVE_BEEN_ATTACKED"]=0 : enemiesInfo[enemy]["HAVE_BEEN_ATTACKED"]=1;
	}
} 

// Fonction qui permet de récupérer l'information de type "type" pour tous les ennemis
// Ex : getEnemiesInfo("LIFE")
function getEnemiesInfo(type) {
	var enemyInfoType = [];
	for (var enemy in enemiesInfo) {
		enemyInfoType[enemy["ID"]]=enemy[type];
	}
	return(enemyInfoType);
}

// Fonction qui permet de récupérer l'information de type "type" pour un ennemi donné
// Ex : getEnemiesInfo("LIFE")
function getEnemyInfoFor(leekId,type) {
	for (var enemy in enemiesInfo) {
		if (enemy["ID"] == leekId) return(enemy[type]);
	}
}

// Fonction qui retourne un des ennemis le plus faible en terme de vie
function getWeakestEnemy() {
	var lifeTable = getEnemiesInfo("LIFE");
	return(search(lifeTable,arrayMin(lifeTable)));
}

// Fonction qui retourne un des ennemis le plus fort en terme de vie
function getStrongestEnemy() {
	var lifeTable = getEnemiesInfo("LIFE");
	return(search(lifeTable,arrayMax(lifeTable)));
}

// Fonction qui retourne un tableau d'ennemis non protégés
function getUnprotectedEnemies() {
	var unprotectedEnemies = [];
	var relativeShieldTable = getEnemiesInfo("RELATIVE_SHIELD");
	var absoluteShieldTable = getEnemiesInfo("ABSOLUTE_SHIELD");

	for (var leekId : var shieldValue in relativeShieldTable) {
		if (relativeShieldTable[leekId] ==0 && absoluteShieldTable[leekId] == 0 ) push(unprotectedEnemies,leekId);
	}
	return(unprotectedEnemies);
}

// Fonction qui retourne un tableau des ennemis proches de la mort
// en fonction d'une arme "withWeapon" et du nombre de tirs que l'on va pouvoir effectuer
// TODO : Prendre en compte les armures potentielles des ennemis
function getEnemiesAboutToDie(withWeapon) {
	var enemiesAboutToDie=[];
	var lifeTable = getEnemiesInfo("LIFE");
	for (var leekId : var lifeValue in lifeTable) {
		if (getWeaponDamage(withWeapon) * (1 + getForce() / 100) * floor(getTP()/getWeaponCost(withWeapon)) > getLife(leekId)) push(enemiesAboutToDie,leekId);
	}
	return(enemiesAboutToDie);	
}

// Fonction qui retourne un tableau d'ennemi que l'on peut shooter
function getShootableEnemies() {

}

			////////////////////////////////////////////////////////
			///////										     ///////
			///////			Allies Info Functions			 ///////
			///////											 ///////
			////////////////////////////////////////////////////////
			
function getAlliesAllInfo() {	
	for (var ally in getAliveAllies()) {
		alliesInfo[ally] = [];
		alliesInfo[ally]["ID"]=ally;
		alliesInfo[ally]["TOTAL_LIFE"]=getTotalLife(ally);
		alliesInfo[ally]["LIFE"]=getLife(ally);
		if (getTurn() == 1) alliesInfo[ally]["BASE_FORCE"]=getForce(ally);
		if (getTurn() == 1) alliesInfo[ally]["BASE_AGILITY"]=getAgility(ally);
		if (getTurn() == 1) alliesInfo[ally]["LAST_LIFE"]=getLife(ally);
		alliesInfo[ally]["RELATIVE_SHIELD"]=getRelativeShield(ally);
		alliesInfo[ally]["ABSOLUTE_SHIELD"]=getAbsoluteShield(ally);
		alliesInfo[ally]["DISTANCE"]=getCellDistance(getCell(),getCell(ally));
		alliesInfo[ally]["LIFE"] == alliesInfo[ally]["LAST_LIFE"] ? alliesInfo[ally]["HAVE_BEEN_ATTACKED"]=0 : alliesInfo[ally]["HAVE_BEEN_ATTACKED"]=1;
	}
}

// Fonction qui permet de récupérer l'information de type "type" pour tous les alliés
// Ex : getAlliesInfo("LIFE")
function getAlliesInfo(type) {
	var alliesInfoType = [];
	for (var ally in alliesInfo) {
		alliesInfo[ally["ID"]]=ally[type];
	}
	return(alliesInfoType);
}

// Fonction qui retourne une liste des alliés qui devrait/pourrait être soigné
function getAlliesToHeal() {
	var lifeThreshold;
	var alliesToHeal = [];
	var lifeTable = getAlliesInfo("LIFE");
	var totalLifeTable = getAlliesInfo("TOTAL_LIFE");
	for (var leekId : var lifeValue in lifeTable) {
			
	if ( isStretchingOn(getLeek()) ) {
		lifeThreshold = totalLifeTable[leekId] - CHIP_CURE_VALUE * ( 1 + ((getAgility()) / 100 ));
	} else {
		lifeThreshold = totalLifeTable[leekId] - CHIP_CURE_VALUE * ( 1 + ((getAgility() + 50) / 100 ));
	}	
	 
	if (lifeValue < lifeThreshold ) push(alliesToHeal,leekId);
	}
	return(alliesToHeal);		
}
			

			////////////////////////////////////////////////////////
			///////										     ///////
			///////				Action Functions			 ///////
			///////											 ///////
			////////////////////////////////////////////////////////


// Fonction qui permet de tirer tant que l'on a des PT
function shootAsMuchAsYouCan() {

}

function playChipOn(chip,leek) {

}

// Fonction essentielle qui devra permettre de déterminer l'action à faire 
// en fonction de la situation
// Liste des actions (définir un ordre de préférence):
//			- Se soigner
//			- Soigner un ami
//			- Se protéger
//			- Protéger un ami
//			- Attaquer via un chip
//			- Bouger
//			- Tirer
//			- Parler
// Retourne une action à exécuter
function chooseAction() {
	if (getLife() < 10) {
	
	}
}

// Fonction qui permet d'exécuter l'action "action"
// Utilisation chip sur leek ou alliés
// Mouvement
// Tir
// ....
function doAction(action) {

}
			////////////////////////////////////////////////////////
			///////										     ///////
			///////				User own functions			 ///////
			///////											 ///////
			////////////////////////////////////////////////////////
			


///////////////////////////////////////////////////////////////////////////
///////																///////
///////					Main code starts here !						///////
///////																///////
///////////////////////////////////////////////////////////////////////////

// On rafraichit le tableau d'infos de tous les alliés
getAlliesAllInfo();

// On rafraichit le tableau d'infos de tous les ennemis
getEnemiesAllInfo();

// On effectue l'action définie par la fonction chooseAction
doAction(chooseAction());


